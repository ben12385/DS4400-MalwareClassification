import numpy as np
from keras import models
from keras import layers
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.datasets import make_classification

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from keras.utils import np_utils

from keras.models import Sequential
from keras.layers import Dense
from keras.datasets import mnist
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import numpy as np

from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_validate
import numpy as np
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder

generalFeatureLocation = "F:\\Malware\\"

#Load data into system
featuresToAdd = list()
with open(generalFeatureLocation+"notEmptyFeatures", "r") as reader:
	for line in reader:
		featuresToAdd.append(int(line))
print("Loaded feature list")

trainX = list()
trainY = list()
count = 0
with open(generalFeatureLocation+"trainFeatures", "r") as reader:
	for line in reader:
		if count%1000 == 999:
			print(count)

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		trainX.append(toAdd)
		trainY.append(int(splittedData[-1]))

scaler = StandardScaler()
trainX = scaler.fit_transform(trainX)
print("Loaded all training set")

trainY = np.array(trainY)
onehot_encoder = OneHotEncoder(sparse=False, n_values=10)
trainY = trainY.reshape(len(trainY), 1)
trainY = onehot_encoder.fit_transform(trainY)

# create model
model = Sequential()
model.add(Dense(4096, input_dim=9478, activation='relu'))
model.add(Dense(2048, activation='relu'))
model.add(Dense(512, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='sigmoid'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(trainX, trainY, epochs=11, batch_size=1000)
scores = model.evaluate(trainX, trainY)
print("For train data")
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))

#scores = cross_validate(estimator, trainX, trainY, cv=cv, scoring=scoring, return_train_score=True, n_jobs=-1)


#print("SVM with cValue %d and rbf kernel" % cValue)
#testAccuracy = scores['test_accuracy']
#trainAccuracy = scores['train_accuracy']
#testF1 = scores['test_f1_macro']
#trainF1 = scores['train_f1_macro']
#print("Train Accuracy: %0.6f" % np.mean(trainAccuracy))
#print("Train F1: %0.6f" % np.mean(trainF1))
#print("Test Accuracy: %0.6f" % np.mean(testAccuracy))
#print("Test F1: %0.6f" % np.mean(testF1))

