from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_validate
import numpy as np


generalFeatureLocation = "F:\\Malware\\"

#Load data into system
featuresToAdd = list()
with open(generalFeatureLocation+"notEmptyFeatures", "r") as reader:
	for line in reader:
		featuresToAdd.append(int(line))
print("Loaded feature list")

trainX = list()
trainY = list()
count = 0
with open(generalFeatureLocation+"trainFeatures", "r") as reader:
	for line in reader:
		if count%1000 == 999:
			print(count)

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		trainX.append(toAdd)
		trainY.append(int(splittedData[-1]))

scaler = StandardScaler()
trainX = scaler.fit_transform(trainX)
print("Loaded all training set")

testX = list()
testY = list()
count = 0
with open(generalFeatureLocation+"testFeatures", "r") as reader:
	for line in reader:
		if count%500 == 1:
			print(count)
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		testX.append(toAdd)
		testY.append(int(splittedData[-1]))

testX = scaler.transform(testX)
		
print("Loaded all test set")

for cValue in range(1, 11):
	scoring = {'accuracy': "accuracy", "f1_macro":"f1_macro"}
	cv = 5

	#SVM with rbf kernel
	svcClassifier = SVC(C=cValue, gamma="auto", kernel = "rbf")
	scores = cross_validate(svcClassifier, trainX, trainY, cv=cv, scoring=scoring, return_train_score=True, n_jobs=-1)
	
	print("SVM with cValue %d and rbf kernel" % cValue)
	testAccuracy = scores['test_accuracy']
	trainAccuracy = scores['train_accuracy']
	testF1 = scores['test_f1_macro']
	trainF1 = scores['train_f1_macro']
	
	print("Train Accuracy: %0.6f" % np.mean(trainAccuracy))
	print("Train F1: %0.6f" % np.mean(trainF1))
	print("Test Accuracy: %0.6f" % np.mean(testAccuracy))
	print("Test F1: %0.6f" % np.mean(testF1))
	
	#SVM with sigmoid kernel
	svcClassifier = SVC(C=cValue, gamma="auto", kernel = "sigmoid")
	scores = cross_validate(svcClassifier, trainX, trainY, cv=cv, scoring=scoring, return_train_score=True, n_jobs=-1)
	
	print("SVM with cValue %d and sigmoid kernel" % cValue)
	testAccuracy = scores['test_accuracy']
	trainAccuracy = scores['train_accuracy']
	testF1 = scores['test_f1_macro']
	trainF1 = scores['train_f1_macro']
	
	print("Train Accuracy: %0.6f" % np.mean(trainAccuracy))
	print("Train F1: %0.6f" % np.mean(trainF1))
	print("Test Accuracy: %0.6f" % np.mean(testAccuracy))
	print("Test F1: %0.6f" % np.mean(testF1))

	print()