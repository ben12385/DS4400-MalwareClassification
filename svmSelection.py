from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import NuSVC
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler


generalFeatureLocation = "F:\\Malware\\"

#Load data into system
featuresToAdd = list()
with open(generalFeatureLocation+"notEmptyFeatures", "r") as reader:
	for line in reader:
		featuresToAdd.append(int(line))
print("Loaded feature list")

trainX = list()
trainY = list()
count = 0
with open(generalFeatureLocation+"trainFeatures", "r") as reader:
	for line in reader:
		if count%1000 == 999:
			print(count)
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		trainX.append(toAdd)
		trainY.append(int(splittedData[-1]))

scaler = StandardScaler()
trainX = scaler.fit_transform(trainX)
print("Loaded all training set")

testX = list()
testY = list()
count = 0
with open(generalFeatureLocation+"testFeatures", "r") as reader:
	for line in reader:
		if count%500 == 499:
			print(count)
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		testX.append(toAdd)
		testY.append(int(splittedData[-1]))

testX = scaler.transform(testX)
		
print("Loaded all test set")

for nuValue in [0.5, 0.25, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0005]:
	
	logreg  = NuSVC(gamma="auto", nu = nuValue)
	#logreg = LogisticRegression(C=regularization, max_iter=100, solver='newton-cg', multi_class='multinomial', n_jobs=-1)
	#logreg = RandomForestClassifier(n_estimators = 20, n_jobs=-1)
	logreg.fit(trainX, trainY)
	print("Fitted")
	y_pred = logreg.predict(testX)
	accuracy = metrics.accuracy_score(testY, y_pred)
	
	print("With regularization %.6f" % regularization)
	print("SVM")
	print("Accuracy: %.4f" % accuracy)
	confMatrix = confusion_matrix(testY, y_pred)
	print(confMatrix)

	
	print()