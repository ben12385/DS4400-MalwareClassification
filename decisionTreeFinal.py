from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import numpy as np


generalFeatureLocation = "F:\\Malware\\"
infoGainLocation = "C:\\Users\\Ben\\Documents\\GitHub\\DS4400-MalwareClassification\\"

count = 0
#Load data into system
trainX = list()
trainY = list()

featuresToAdd = list()
with open(generalFeatureLocation+"informationGainAbove0.6", "r") as reader:
	for line in reader:
		featuresToAdd.append(int(line))
print("Loaded feature list")

count = 0
with open(generalFeatureLocation+"trainFeatures", "r") as reader:
	for line in reader:
		if count%1000 == 999:
			print(count)
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		trainX.append(toAdd)
		trainY.append(int(splittedData[-1]))

		
print("Loaded all training set")

testX = list()
testY = list()
count = 0
with open(generalFeatureLocation+"testFeatures", "r") as reader:
	for line in reader:
		if count%500 == 499:
			print(count)
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		testX.append(toAdd)
		testY.append(int(splittedData[-1]))

testX = scaler.transform(testX)
		
print("Loaded all test set")


ranForestClas = RandomForestClassifier(n_estimators = 100)
ranForestClas.fit(trainX, trainY)			
y_pred = ranForestClas.predict(trainX)

accuracy = metrics.accuracy_score(trainY, y_pred)
f1Score = metrics.f1_score(trainY, y_pred, average="macro")
confMatrix = metrics.confusion_matrix(trainY, y_pred)
print("Decision Tree Training Set")
print("Accuracy: ", accuracy)
print("F1 Score: ", f1Score)
print(confMatrix)
print()


y_pred = ranForestClas.predict(testX)
accuracy = metrics.accuracy_score(testY, y_pred)
f1Score = metrics.f1_score(testY, y_pred, average="macro")
confMatrix = metrics.confusion_matrix(testY, y_pred)
print("Decision Tree Test Set")
print("Accuracy: ", accuracy)
print("F1 Score: ", f1Score)
print(confMatrix)
print()