import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from multiprocessing import Process, Manager, Lock
import time

#9478 features to check
#9480 is perfect split to 4
def featureSelection(trainX, trainY, featureList, accuracyList, set, lock, i):

	setShift = 1185*set
	ranForestClas = RandomForestClassifier(n_estimators = 5)
	
	for featureSelected in range(0+setShift, 1185+setShift):
		if(featureSelected >= 9478):
			continue
		if featureSelected in featureList:
			accuracyList.append(-1)
		else:
			toTrainX = np.array(trainX[:,featureSelected])
			toTrainX = toTrainX.reshape(-1, 1)
			for toAdd in featureList:
				toAppend = trainX[:,toAdd].reshape(-1, 1)
				toTrainX = np.append(toTrainX, toAppend, axis=1)
			#Random Forest
			ranForestClas.fit(toTrainX, trainY)			
			y_pred = ranForestClas.predict(toTrainX)

			accuracy = metrics.accuracy_score(trainY, y_pred)
			accuracyList.append(accuracy)
		
		lock.acquire()
		try:
			i[0] += 1
			if i[0]%500 == 0:
				print i[0]
		except Exception as e:
			print e
		finally:
			lock.release()


if __name__ == "__main__":
	generalFeatureLocation = "//export//home//bchua010//"

	#Load data into system
	trainX = list()
	trainY = list()

	featuresToAdd = list()
	with open(generalFeatureLocation+"notEmptyFeatures", "r") as reader:
		for line in reader:
			featuresToAdd.append(int(line))
	print "Loaded feature list"

	count = 0
	with open(generalFeatureLocation+"trainFeatures", "r") as reader:
		for line in reader:
			if count%1000 == 0:
				print count

			count += 1
			splittedData = line.split(",")

			toAdd = list()
			for feature in featuresToAdd:
				toAdd.append(int(splittedData[feature]))
			trainX.append(toAdd)
			trainY.append(int(splittedData[-1]))

			
	print "Loaded all training set" 

	isSame = True
	for a in range(0, len(trainX[0])):
		if(trainX[0][a] != trainX[-1][a]):
			isSame = False
			break
	print isSame
	print ""

	trainX = np.array(trainX).astype(np.float64)
	trainY = np.array(trainY)


	#trainY = trainY.reshape(-1, 1)
	#onehot_encoder = OneHotEncoder(sparse=False)
	#trainY = onehot_encoder.fit_transform(trainY)

	#Logistic Regression
	#logReg = LogisticRegression(solver='lbfgs', multi_class='multinomial')
	ranForestClas = RandomForestClassifier()
	ranForestClas.fit(trainX, trainY)			
	y_pred = ranForestClas.predict(trainX)

	accuracy = metrics.accuracy_score(trainY, y_pred)
	print "Accuracy: ", accuracy

	featureLen = len(trainX[0])
	print featureLen

	featureList = list()
	featureListAccuracy = list()
	for a in range(0, featureLen):
		compareList = list()
		print "Starting Set %d" % len(featureList)
		
		
		i = Manager().list()
		i.append(0)
		
		lock = Lock()
		accuracyList1 = Manager().list()
		thread1 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList1, 0, lock, i))
		
		accuracyList2 = Manager().list()
		thread2 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList2, 1, lock, i))
		
		accuracyList3 = Manager().list()
		thread3 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList3, 2, lock, i))
		
		accuracyList4 = Manager().list()
		thread4 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList4, 3, lock, i))
		
		accuracyList5 = Manager().list()
		thread5 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList5, 4, lock, i))
		
		accuracyList6 = Manager().list()
		thread6 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList6, 5, lock, i))
		
		accuracyList7 = Manager().list()
		thread7 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList7, 6, lock, i))
		
		accuracyList8 = Manager().list()
		thread8 = Process(target=featureSelection, args=(trainX, trainY, featureList, accuracyList8, 7, lock, i))

		
		thread1.start()
		thread2.start()
		thread3.start()
		thread4.start()
		thread5.start()
		thread6.start()
		thread7.start()
		thread8.start()
		
		thread1.join()
		thread2.join()
		thread3.join()
		thread4.join()
		thread5.join()
		thread6.join()
		thread7.join()
		thread8.join()
		
		compareList.extend(accuracyList1)
		compareList.extend(accuracyList2)
		compareList.extend(accuracyList3)
		compareList.extend(accuracyList4)
		compareList.extend(accuracyList5)
		compareList.extend(accuracyList6)
		compareList.extend(accuracyList7)
		compareList.extend(accuracyList8)
		
		print np.array(compareList).shape
		
		featureToSelect = np.argmax(compareList)
		print featureToSelect
		featureList.append(featureToSelect)
		featureListAccuracy.append(compareList[featureToSelect])
		print featureListAccuracy[-1]
		print featureList

	featureSetToSelect = np.argmax(featureListAccuracy)
	print featureList[:featureSetToSelect+1]
	print featureListAccuracy[featureSetToSelect]
				
				