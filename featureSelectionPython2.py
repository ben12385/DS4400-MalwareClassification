import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from multiprocessing import Process, Manager, Lock
import time

generalFeatureLocation = "//export//home//bchua010//"

#Load data into system
trainX = list()
trainY = list()

featuresToAdd = list()
with open(generalFeatureLocation+"notEmptyFeatures", "r") as reader:
	for line in reader:
		featuresToAdd.append(int(line))
print "Loaded feature list"

count = 0
with open(generalFeatureLocation+"trainFeatures", "r") as reader:
	for line in reader:
		if count%1000 == 5:
			print count
			break

		count += 1
		splittedData = line.split(",")

		toAdd = list()
		for feature in featuresToAdd:
			toAdd.append(int(splittedData[feature]))
		trainX.append(toAdd)
		trainY.append(int(splittedData[-1]))

		
print "Loaded all training set"

isSame = True
for a in range(0, len(trainX[0])):
	if(trainX[0][a] != trainX[-1][a]):
		isSame = False
		break
print isSame
print()

trainX = np.array(trainX).astype(np.float64)
trainY = np.array(trainY)


#trainY = trainY.reshape(-1, 1)
#onehot_encoder = OneHotEncoder(sparse=False)
#trainY = onehot_encoder.fit_transform(trainY)

#Logistic Regression
#logReg = LogisticRegression(solver='lbfgs', multi_class='multinomial')
ranForestClas = RandomForestClassifier()
ranForestClas.fit(trainX, trainY)			
y_pred = ranForestClas.predict(trainX)

accuracy = metrics.accuracy_score(trainY, y_pred)
print "Accuracy: ", accuracy

featureLen = len(trainX[0])
print featureLen

featureList = list()
featureListAccuracy = list()
for a in range(0, featureLen):
	compareList = list()
	print "Starting Set %d" % len(featureList)
	
	i = 0
	
	for featureSelected in range(0, featureLen):
		if featureSelected in featureList:
			compareList.append(-1)
		else:
			toTrainX = np.array(trainX[:,featureSelected])
			toTrainX = toTrainX.reshape(-1, 1)
			for toAdd in featureList:
				toAppend = trainX[:,toAdd].reshape(-1, 1)
				toTrainX = np.append(toTrainX, toAppend, axis=1)
			#Random Forest
			ranForestClas = RandomForestClassifier(n_estimators = 10, n_jobs=-1)
			ranForestClas.fit(toTrainX, trainY)			
			y_pred = ranForestClas.predict(toTrainX)

			accuracy = metrics.accuracy_score(trainY, y_pred)
			compareList.append(accuracy)
		
		i +=1
		if i%1000 == 0:
			print i


	featureToSelect = np.argmax(compareList)
	print featureToSelect
	featureList.append(featureToSelect)
	featureListAccuracy.append(compareList[featureToSelect])
	print featureListAccuracy[-1]
	print featureList

featureSetToSelect = np.argmax(featureListAccuracy)
print featureList[:featureSetToSelect+1]
print featureListAccuracy[featureSetToSelect]
			
			