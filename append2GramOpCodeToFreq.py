import os
import numpy as np

#opcodeSeqFileLocation = "C:\\Users\\Ben\\Desktop\\Malware"
opcodeSeqFileLocation = "F:\\Malware\\opcode\\"
freqFileLocation = "C:\\Users\\Ben\\Documents\\GitHub\\DS4400-MalwareClassification\\freqTrainingData"
filesToSkipLocation = "C:\\Users\\Ben\\Documents\\GitHub\\DS4400-MalwareClassification\\filesToSkip"
totalFeatureFile = "F:\\Malware\\features"

listOfOpcodes = "cl,psubusb,cmovl,si,cmovns,pcmpgtb,fabs,wait,fsqrt,unpckhps,aad,daa,aaa,ends,loope,fdivrp,ins,vpermilps,fsub,and,xorps,cmovs,wbinvd,cld,clc,punpckldq,insertps,ecx,fxam,fucomip,setnb,cmovnb,start,fidivr,sysexit,scas,cmpsd,iretw,rva,stosd,vaddps,jge,setns,fclex,imul,vsqrtps,vpshuflw,pabsw,sldt,jz,cmps,vmovdqu,fbld,divps,punpckhqdq,eax,subps,evenexp,fsubrp,dx,movntdq,pmullw,vmovddup,sal,setnle,fstcw,psignw,prefetch,month,cmplesd,lods,pand,shufpd,roundps,fldcw,psllw,fst,pblendvb,vpaddsb,vmwrite,vmovntps,fmul,paddsb,iret,pmulhw,fcomp,vpsllw,outsd,das,fstp,fnclex,fprem,pshufw,pfh,pmuludq,retnw,lock,scasb,lidt,fucompp,psubusw,addpd,push,lgs,fsubr,END,minss,enter,psadbw,fidiv,lsl,rcpps,cdq,cbw,bp,rcl,ht,paddd,movdqa,fmulp,vpmullw,orpd,xabort,sidt,lea,retn,faddp,psrlq,pfmul,word,movnti,frstor,qword,vmovntpd,vpmulhw,fcmovne,paddb,fxch,emms,pextrb,std,fptc,loopw,fnsave,fcmove,out,punpckhdq,fcmovu,fcmovnbe,esi,fisubr,cmpeqsd,db,outs,cmovle,mulss,movdqu,bt,fldenv,arpl,movmskps,cmpneqps,pshufb,vpunpckhdq,fdivr,dh,fpatan,ax,_tpc_ext,movhpd,leavew,ptest,cmova,ror,cmovz,vpmaddwd,fcmovb,ah,scasd,rdpmc,fsetpm,dw,setp,offset,pshufd,string,fxsave,movntps,movlhps,seto,vpextrw,subss,fndisi,lodsb,subsd,bts,psubsb,cmpltps,fild,maxss,jbe,getsec,pmulhuw,fxtract,pfcmpge,xrstor,palignr,vpsrlq,setle,cmovo,rsts,lddqu,fstsw,phminposuw,leave,popf,shr,pswapd,fptan,sgdt,vpunpckhbw,pslld,movss,mulps,vzeroupper,pfcmpgt,popa,ffreep,aam,fnop,movsb,div,fisub,repne,rsqrtss,pmovmskb,prefetchnta,vpaddusw,cmpnlepd,cmpxchg,pfmax,psraw,setnl,psllq,phaddw,vpcmpeqw,bx,fiadd,jg,pcmpeqd,movd,divsd,jecxz,bsf,fisttp,setnz,rep,outsw,esp,fnstsw,invd,icebp,pminuw,comisd,cmovnz,femms,pcmpeqw,fchs,fnstenv,hnt,pavgb,punpcklqdq,paddsw,movmskpd,fcos,xorpd,rsldt,pcmpeqb,punpckhwd,shld,hlt,pinsrd,ldmxcsr,vsubps,this,xor,pextrw,frndint,lodsw,addsd,movsx,idiv,insw,vpaddw,cwde,vmovapd,setbe,fsincos,minps,pmaddwd,addps,lldt,aas,divss,vpunpckhqdq,fist,mulpd,paddq,pinsrw,fucom,sahf,pminub,pshuflw,syscall,pcmpgtd,andps,lodsd,fistp,movsd,punpcklwd,fneni,pandn,bound,sqrtss,movlpd,rol,test,unpcklps,jb,psrld,mul,pminud,por,cmovnp,vmovupd,lar,cli,jno,fsave,svts,bl,cmpps,orps,lss,ficomp,paddusw,large,jmp,vandnpd,fbstp,wrmsr,cy,movsw,pushaw,psrlw,psubb,ffree,insd,fcmovnu,movhps,setl,pfpnacc,vrsqrtss,ja,bswap,setnp,fcmovnb,cpuid,subpd,rcpss,vmovss,xadd,ebx,psrldq,setz,minsd,cx,pmovzxbd,or,cmovno,cmc,jnb,cmpleps,pfcmpeq,vcomisd,buf,pmulhrsw,pmovzxwd,stos,dd,cmpnlesd,vshufps,pause,vmovlhps,stosb,call,sbb,extractps,int,vpshufhw,outsb,vunpckhps,mulsd,movaps,cmpsb,jp,vmovdqa,in,retfw,vxorps,vmulps,fcmovbe,not,stmxcsr,lfs,pfacc,cmovbe,setalc,cmpneqpd,addss,movapd,andnpd,rdmsr,psubsw,nop,sets,fldpi,rdtsc,vcmppd,btc,pslldq,mov,vmovd,andpd,fdecstp,shrd,shufps,cmdstart,sti,ftst,sfence,fcomip,maxps,rc,unpcklpd,pminsw,sp,paddw,sysenter,paddusb,sar,inc,jcxz,vmovaps,fninit,vmread,pshufhw,pfrcp,cmp,fldz,fdivp,vblendps,jle,edi,psubd,movups,bsr,vpcext,lahf,repe,unpckhpd,pfsub,retf,cmovge,dword,xchg,popfw,vcmpss,lds,jl,movzx,cmovb,rsqrtps,movlps,fcomi,cmpeqss,movntq,cmpltsd,codepage,fsin,punpcklbw,di,fld,bh,fucomi,popaw,edx,rsm,loopwe,psubw,ucomisd,pxor,byte,fdiv,jnz,vorpd,rcr,btr,sub,pfrsqrt,comiss,al,cwd,fscale,jnp,prefetchw,align,cmovp,cmpsw,pavgw,packsswb,neg,pfsubr,sqrtps,unicode,pop,pmaddubsw,verw,pfmin,into,cmpltpd,fincstp,packuswb,sysret,pushf,packusdw,packssdw,setb,fcom,enterw,vsqrtpd,xlat,pextrd,svldt,stosw,andnps,loop,jns,les,phaddd,movhlps,pavgusb,dl,shl,punpckhbw,sqrtsd,stc,ficom,vrcpss,xbegin,vpmaxub,setnbe,pusha,ucomiss,movs,setno,loopwne,scasw,mpsadbw,cmovg,pfadd,movq,p,str,psrad,pfnacc,ebp,fnstcw,js,loopne,fsubp,jo,pcmpgtw,pmaxub,pmaxsw,clts,fucomp,phsubd,psubq,vunpcklps,fimul,ch,pushfw,vpandn,plocinfo,fcompp,insb".split(",")


listOfFiles = os.listdir(opcodeSeqFileLocation)
listOfFiles.sort()

toSkip = ""
with open(filesToSkipLocation, "r", encoding="latin-1") as reader:
	toSkip = reader.readlines()

count = 1
with open(totalFeatureFile, "w", encoding="latin-1") as writer:
	with open(freqFileLocation, "r", encoding="latin-1") as freqReader:
		for line in freqReader:
			splittedData = line.split(",")
			if(splittedData[-1] in toSkip):
				continue
			else:
				#2gram array
				twoGram = np.zeros((598, 598), dtype=int)
			
				#open the file to search
				try:
					with open(opcodeSeqFileLocation + splittedData[-1][:-1] + "_opcode" , "r", encoding="latin-1") as opCodeReader:
						print(str(count) + " Opening: " + splittedData[-1][:-1])
						count += 1
						
						prevOpCode = -1
						currentOpCode = -1
						#Store currentopcode and previous opcode and use them as index in the 2d array
						for opcode in opCodeReader:
							prevOpCode = currentOpCode
							if opcode in listOfOpcodes:
								currentOpCode = listOfOpcodes.index(currentOpCode)
							else:
								#If opcode not in list then is blank
								currentOpCode = 597
							#If not the first 2 then add to list
							if prevOpCode >= 0 and currentOpCode >= 0:
								twoGram[prevOpCode][currentOpCode] += 1
				except Exception as e:
					print(e)
					print(splittedData[-1])
					print(line)
				
				#Calculated all the 2 gram opcode so now reshape array
				twoGram = np.reshape(twoGram, -1)
				toWrite =  splittedData[-1][:-1] + "," + ",".join(map(str, twoGram.tolist())) + ",".join(splittedData[:-1]) + "\n"
				writer.write(toWrite)
				
						 